name: Manage GitHub Teams and Members

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Perform a dry run without making changes'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  manage-teams:
    runs-on: ubuntu-latest
    
    steps:
      - name: Create App token
        id: create_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private-key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up GitHub CLI and dependencies
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate Team Configurations
        run: |
          team_configs=(./.github/workflows/team-configs/*.json)
          
          for team_file in "${team_configs[@]}"; do
            if ! jq empty "$team_file" 2>/dev/null; then
              echo "Invalid JSON in $team_file"
              exit 1
            fi
          done

      - name: Manage Teams
        env:
          DRY_RUN: ${{ inputs.dry-run }}
        run: |
          # Improved function for team property extraction
          get_team_properties() {
            local team_json=$1
            TEAM_NAME=$(echo "$team_json" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_DESCRIPTION=$(echo "$team_json" | jq -r '.description // ""')
            TEAM_PRIVACY=$(echo "$team_json" | jq -r '.privacy // "closed"')
            TEAM_PERMISSION=$(echo "$team_json" | jq -r '.permission // "push"')
            TEAM_NOTIFICATION=$(echo "$team_json" | jq -r '.notification_setting // "notifications_enabled"')
          }

          # Logging function
          log_action() {
            local action=$1
            local team_name=$2
            echo "[${action^^}] Team: $team_name"
          }

          # Fetch existing teams
          mapfile -t existing_teams < <(gh api orgs/${{ github.repository_owner }}/teams --jq '.[].slug')

          # Process team configurations
          for team_file in ./.github/workflows/team-configs/*.json; do
            [[ -e $team_file ]] || continue

            team=$(cat "$team_file")
            get_team_properties "$team"

            if [[ " ${existing_teams[*]} " =~ " ${TEAM_SLUG} " ]]; then
              log_action "update" "$TEAM_NAME"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method PATCH \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}" \
                  -f "name=${TEAM_NAME}" \
                  -f "description=${TEAM_DESCRIPTION}" \
                  -f "privacy=${TEAM_PRIVACY}" \
                  -f "notification_setting=${TEAM_NOTIFICATION}"
              fi
            else
              log_action "create" "$TEAM_NAME"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams" \
                  -f "name=${TEAM_NAME}" \
                  -f "description=${TEAM_DESCRIPTION}" \
                  -f "privacy=${TEAM_PRIVACY}" \
                  -f "permission=${TEAM_PERMISSION}" \
                  -f "notification_setting=${TEAM_NOTIFICATION}"
              fi
            fi
          done

          # Remove teams without configurations
          for team_slug in "${existing_teams[@]}"; do
            if ! compgen -G "./.github/workflows/team-configs/${team_slug}.json" > /dev/null; then
              log_action "delete" "$team_slug"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${team_slug}"
              fi
            fi
          done