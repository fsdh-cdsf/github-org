---
name: Manage GitHub Teams and Members from JSON

on:
  workflow_dispatch: # Allows the workflow to be manually triggered

permissions: read-all

jobs:
  manage-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token
        id: create_token
        uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc # v3.0.0
        with:
          app_id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Manage Teams
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          team_files=$(find ./.github/workflows/team-configs -name '*.json')
          existing_teams=$(gh api orgs/${{ github.repository_owner }}/teams --jq '.[].slug')

          # Loop over existing teams and manage based on the JSON files
          for team_slug in $existing_teams; do
            json_file=$(find ./.github/workflows/team-configs -name "${team_slug}.json")

            if [[ -z "$json_file" ]]; then
              # If no JSON file exists, delete the team
              echo "No JSON file found for team $team_slug. Deleting team..."
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${{ github.repository_owner }}/teams/${team_slug}"
            else
              # If a JSON file exists, update the team
              team=$(cat "$json_file")
              TEAM_NAME=$(echo "$team" | jq -r '.name')
              TEAM_DESCRIPTION=$(echo "$team" | jq -r '.description // ""')
              TEAM_PRIVACY=$(echo "$team" | jq -r '.privacy // "closed"')
              TEAM_PERMISSION=$(echo "$team" | jq -r '.permission // "push"')
              TEAM_NOTIFICATION=$(echo "$team" | jq -r '.notification_setting // "notifications_enabled"')

              echo "Updating team $TEAM_NAME..."
              gh api \
                --method PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${{ github.repository_owner }}/teams/${team_slug}" \
                -f "name=${TEAM_NAME}" \
                -f "description=${TEAM_DESCRIPTION}" \
                -f "privacy=${TEAM_PRIVACY}" \
                -f "notification_setting=${TEAM_NOTIFICATION}"
            fi
          done

          # Create any teams that exist in JSON but aren't part of the existing teams
          echo "$team_files" | tr ' ' '\n' | while read -r team_file; do
            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_DESCRIPTION=$(echo "$team" | jq -r '.description // ""')
            TEAM_PRIVACY=$(echo "$team" | jq -r '.privacy // "closed"')
            TEAM_PERMISSION=$(echo "$team" | jq -r '.permission // "push"')
            TEAM_NOTIFICATION=$(echo "$team" | jq -r '.notification_setting // "notifications_enabled"')

            if ! echo "$existing_teams" | grep -q "$TEAM_SLUG"; then
              echo "Creating team $TEAM_NAME..."
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${{ github.repository_owner }}/teams" \
                -f "name=${TEAM_NAME}" \
                -f "description=${TEAM_DESCRIPTION}" \
                -f "privacy=${TEAM_PRIVACY}" \
                -f "permission=${TEAM_PERMISSION}" \
                -f "notification_setting=${TEAM_NOTIFICATION}"
            fi
          done

      - name: Manage Team Members
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          team_files=$(find ./.github/workflows/team-configs -name '*.json')
          echo "$team_files" | tr ' ' '\n' | while read -r team_file; do
            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_MEMBERS=$(echo "$team" | jq -c '.members')

            # Get current team members
            current_members=$(gh api "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/members" --jq '.[].login')

            # Get current organization members
            current_org_members=$(gh api "/orgs/${{ github.repository_owner }}/members" --jq '.[].login')
            
            # Add or update members
            echo "$TEAM_MEMBERS" | jq -c '.[]' | while read -r member; do
              username=$(echo "$member" | jq -r '.username')

              # Check if the user is a member of the organization
              is_org_member=false
              if echo "$current_org_members" | grep -qw "$username"; then
                is_org_member=true
              fi

              if [ "$is_org_member" = true ]; then
                TEAM_ID=$(gh api "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}" --jq '.id')

                gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/teams/${TEAM_ID}/members/${username}"
              else
                echo "User $username is not a member of the organization. Skipping..."
              fi
            done

            # Remove members not in the JSON file or not in the organization
            for member in $current_members; do
              is_org_member=false
              if echo "$current_org_members" | grep -qw "$member"; then
                is_org_member=true
              fi

              # Simplified condition for removal
              is_member_in_json=$(echo "$TEAM_MEMBERS" | jq -e --arg member "$member" '.[] | select(.username == $member)' > /dev/null && echo true || echo false)
              
              if [ "$is_member_in_json" = false ] || [ "$is_org_member" = false ]; then
                echo "Removing member $member from team $TEAM_SLUG..."
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/$member"
              fi
            done
          done
